version: "3.8"
services:
  postgres:
    container_name: worklynesia_db
    image: postgres:15-alpine
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - worklynesia
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_DATABASE}"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://Localhost:9092
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    networks:
      - worklynesia

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: worklynesia_kafdrop
    networks:
      - worklynesia
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
      JVM_OPTS: "-Xms32M -Xmx64M"
      SERVER_SERVLET_CONTEXTPATH: "/"
  # depends_on:
  #   kafka:
  #     condition: service_healthy
  # restart: unless-stopped

  kafka-init:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./scripts:/scripts
    environment:
      BOOTSTRAP_SERVER: "kafka:29092"
      REPLICATION_FACTOR: 1
    entrypoint: ["/scripts/create-topics.sh"]
    networks:
      - worklynesia

  # auth-service:
  #   build:
  #     context: .
  #     dockerfile: ./apps/auth-service/Dockerfile
  #   container_name: worklynesia_auth
  #   env_file:
  #     - .env
  #   environment:
  #     DATABASE_URL: "postgresql://${DB_USERNAME}:${DB_PASSWORD}@postgres:5432/${DB_DATABASE}"
  #     KAFKA_BROKERS: "kafka:29092"
  #     KAFKA_CLIENT_ID: ${KAFKA_CLIENT_ID_AUTH}
  #     KAFKA_CONSUMER_GROUP_ID: ${KAFKA_CONSUMER_GROUP_AUTH}
  #   volumes:
  #     - ./prisma:/app/prisma
  #   ports:
  #     - "${AUTH_SERVICE_PORT}:${AUTH_SERVICE_PORT}"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     kafka:
  #       condition: service_healthy
  #   networks:
  #     - worklynesia
  #   # restart: unless-stopped

  # profile-service:
  #   build:
  #     context: .
  #     dockerfile: ./apps/profile-service/Dockerfile
  #   container_name: worklynesia_profile
  #   env_file:
  #     - .env
  #   environment:
  #     DATABASE_URL: "postgresql://${DB_USERNAME}:${DB_PASSWORD}@postgres:5432/${DB_DATABASE}"
  #     KAFKA_BROKERS: "kafka:29092"
  #     KAFKA_CLIENT_ID: ${KAFKA_CLIENT_ID_PROFILE}
  #     KAFKA_CONSUMER_GROUP_ID: ${KAFKA_CONSUMER_GROUP_PROFILE}
  #   volumes:
  #     - ./prisma:/app/prisma
  #   ports:
  #     - "${PROFILE_SERVICE_PORT}:${PROFILE_SERVICE_PORT}"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     kafka:
  #       condition: service_healthy
  #   networks:
  #     - worklynesia
  #   # restart: unless-stopped

networks:
  worklynesia:

volumes:
  postgres:
  kafka_data:
  kafka_metadata:
  prisma:
