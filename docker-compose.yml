version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    container_name: worklynesia_db
    image: postgres:15-alpine
    env_file: .env
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - worklynesia
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_DATABASE}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - worklynesia
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "kafka-topics.sh --bootstrap-server localhost:9092 --list",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka UI
  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: worklynesia_kafdrop
    networks:
      - worklynesia
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
      JVM_OPTS: "-Xms32M -Xmx64M"
      SERVER_SERVLET_CONTEXTPATH: "/"
    depends_on:
      - kafka

  # API Gateway
  # api-gateway:
  #   build:
  #     context: .
  #     dockerfile: ./apps/api-gateway/Dockerfile
  #   container_name: worklynesia_api_gateway
  #   env_file: .env
  #   ports:
  #     - "3000:3000"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     kafka:
  #       condition: service_healthy
  #   networks:
  #     - worklynesia

  # Auth Service
  # auth-service:
  #   build:
  #     context: .
  #     dockerfile: ./apps/auth-service/Dockerfile
  #   container_name: worklynesia_auth
  #   env_file: .env
  #   environment:
  #     DATABASE_URL: "postgresql://${DB_USERNAME}:${DB_PASSWORD}@postgres:5432/${DB_DATABASE}"
  #     KAFKA_BROKER: "kafka:9092"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     kafka:
  #       condition: service_healthy
  #   networks:
  #     - worklynesia

  # User Service
  # user-service:
  #   build:
  #     context: .
  #     dockerfile: ./apps/user-service/Dockerfile
  #   container_name: worklynesia_user
  #   env_file: .env
  #   environment:
  #     DATABASE_URL: "postgresql://${DB_USERNAME}:${DB_PASSWORD}@postgres:5432/${DB_DATABASE}"
  #     KAFKA_BROKER: "kafka:9092"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     kafka:
  #       condition: service_healthy
  #   networks:
  #     - worklynesia

  # Attendance Service
  attendance-service:
    build:
      context: .
      dockerfile: ./apps/attendance-service/Dockerfile
    container_name: worklynesia_attendance
    env_file: .env
    environment:
      DATABASE_URL: "postgresql://${DB_USERNAME}:${DB_PASSWORD}@postgres:5432/${DB_DATABASE}"
      KAFKA_BROKER: "kafka:9092"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - worklynesia

  # Notification Service (WebSocket)
  # notification-service:
  #   build:
  #     context: .
  #     dockerfile: ./apps/notification-service/Dockerfile
  #   container_name: worklynesia_notification
  #   env_file: .env
  #   ports:
  #     - "3005:3005"
  #   depends_on:
  #     - kafka
  #   networks:
  #     - worklynesia

  # Dashboard (Frontend)
  # dashboard:
  #   build:
  #     context: .
  #     dockerfile: ./apps/dashboard/Dockerfile
  #   container_name: worklynesia_dashboard
  #   env_file: .env
  #   ports:
  #     - "5173:5173"
  #   depends_on:
  #     - api-gateway
  #   networks:
  #     - worklynesia

networks:
  worklynesia:
    driver: bridge

volumes:
  postgres:
  kafka_data:
  kafka_metadata:
